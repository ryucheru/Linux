~$: コマンドプロンプト

<echo>引数に与えられた文字列を表示
~$ echo "hello world"
⇒hello world

<pwd> print working directory
現在のディレクトリの場所を確認する、カレントディレクトリ(.)
⇒home/ubuntu

~$ history
<history>コマンドの実行履歴を表示

~$　ls: ファイルやディレクトリの情報を表示する。
<ls> すべてのファイルを表示
<ls  -a> 隠しファイルも含めてすべて表示
<ls -l>ファイルの詳細情報を表示する。また、<ls -l　ディレクトリ名>でディレクトリ内のファイルを表示。
<ls -al>のように組み合わせることも可能

ファイルを作成する
echo "hello world" > foo.txt
/home/ubuntu/foo.txtとなる。コマンドの出力をファイルに保存することができる。

<cat foo.txt> hello worldと表示される
ファイルを連結して標準出力に出力する

<cp A.txt B.txt> cpがコピーコマンド。AをBというファイル名でコピーする。
<mv A.txt B.txt> mvがファイルやディレクトリ名前変更コマンド、リネーム。AをBというファイル名に変更する。
<rm A.txt> rmがファイルやディレクトリを削除するコマンド。remove. 完全削除となるので注意。

<mkdir Directo> make directory。 Directoという名前のディレクトリを作る。
<cp A.txt Directo> DirectoというディレクトリにA.txtというファイルをそのままコピー。
<cp A.txt Directo/BB.txt> DirectoというディレクトリにA.txtというファイルをBB.txtという名前に変更してコピー。

<cd Directo>
⇒~/Directo$ チェンジディレクトリ。ディレクトリの移動。カレントディレクトリの移動。

上位ディレクトリの表示
.. 一つ上位のディレクトリ
../.. 二つ上位のディレクトリ
⇒<ls al ..> 一つ上位のディレクトリのファイル一覧を表示する。
⇒<cd ..> 一つ上位のディレクトリに移動する。

ファイルツリー
ツリーの最上位はルート(根本)という。
ツリーの最上位はルートディレクトリという。
ファイルパスはファイルツリーにおいて各ディレクトリやファイルの位置をテキストで記述したもの。
ディレクトリ: /home/ubuntu
ファイル: /home/ubuntu/A.txt
絶対パス: ルートディレクトリを起点に記述
相対パス: カレントディレクトリを起点に記述


[プログラム]
プログラムファイルを作成
echo "puts 'Hello Ruby'" > code/test.rb
プログラムファイルの実行
・Rubyの場合
ruby code/test.rb
⇒Hello Ruby
・Pythonの場合
python code/hello.py　など

これはcd(チェンジディレクトリ)してからだと
python hello.py のみで済む
中身を見たいときは、cat hello.py

[出力のリダイレクト]
ls -al > list.txt
コマンドの出力をファイルに保存することができる。



{{{Linux}}}
⇒カーネルと呼ばれる中核部分に、数多くのソフトウェアツールを組みあわせて提供している。
特徴
Unix互換のOS/Linuxカーネルにシステムツールを統合/オープンソース/多くのITシステムに採用
・Unix: 1969年にアメリカのベル研究所で開発、同時に複数のプログラムを実行する「マルチタスク」、複数のユーザーが利用できる「マルチユーザー」といった機能をサポート。
  -データの格納にプレーンテキストを利用する
  -多数のソフトウェアツールを組み合わせて利用する
  -階層型ファイルシステム
  -周辺機器やプロセス間通信をファイルとして扱う
Linuxディストリビューション
  Linuxカーネルと必要なツールを統合して提供
  ・Red Hat Enterprise Linux(RHEL)
  ・Cent OS
  ・Debian GNU/Linux
  ・Ubuntu
  
ソフトウェア/アプリケーション・OS
  アプリケーション: シェル、PKG管理、コマンド
  OS: カーネル(コンピュータリソースの管理⇒[ハードウェア、メモリ・ファイル、プログラムの呼び出しなど]
  Linuxディストリビューションとして配布
  
Linuxのユーザーインターフェース
  GUI (Graphical User Interface)
  
  
{{パッケージ管理ツール}}
パッケージ
-ソフトウェア本体に、関連ライブラリや設定ファイルをまとめたものetc...
-形式　RPM: Red HatやCent OS
       deb: Debian GNU/LinuxやUbuntu

$ dpkg -l インストール済みアプリケーションを一覧表示
dpkg -l | less: lessコマンド。1ページずつ表示
スペースキーで次のページ、Qを入力すると終了。

slコマンド
・slコマンドをインストール
sudo apt update
sudo apt install sl
・slコマンドを実行
sl
・slコマンドをアンインストール
sudo apt purge sl

シェルコマンド
・コマンドはできるだけひとつのことをうまくやる
・コマンドを組わせて利用する
・標準入出力を経由してテキストデータをやり取り



{{シェル環境}}
 find: ファイル検索コマンド、名前や更新時期などをもとにファイルやディレクトリを検索できる。
  find (検索を開始するパス) (検索パターン)
   例: find example
       find example/*.txt(サブディレクトリは検索しない)
       find example -name "*.txt"(サブディレクトリも検索)
       find example -name "*.txt" -mtime 0 (0:1日以内に更新されたデータ)(
       find example -name "*.txt" > output.txt (サブディレクトリまで探したうえで出力結果をoutput.txtというファイルに保存する。
        ここで*(アスタリスク)はワイルドカードといい、複数の文字に合致する特殊文字。

 grep: ファイルの中のテキストを正規表現で検索する。
  grep (検索パターン) (検索ターゲット)
   例: grep "AA" example/alice.md (example/alice.md内のAAという文字列を検索
       grep "hello" example/*.txt
       grep -r "hello" example (rオプション、すべてのファイルを対象にサブディレクトリまで検索する)
       grep -rl "hello" example (helloという言葉がついたファイル名だけを表示する)
       grep -rl "hello" example (行番号を表示する)
       
正規表現
  テキストのパターンを記述するルール
  いくつかの記号で表す　(メタ文字　・*[]{}()+¥^$)
  EX:) 日本の郵便番号⇒　(〒)[0-9]{3}-[0-9]{4}
  grep -n "hello." example/test.txt (改行以外の任意の文字)
  grep -n "hello[0-9]" example/test.tx
  grep -n "hello_." example/test.txなど
  ^paiza⇒hellopaiza
  paiza$⇒
  grep -E "(hello|paiza)" example/test.txt : OR検索
  直前の項目の繰り返し回数を指定
  *: 直前の項目が0回以上マッチする。
  ?: 直前の項目が0回か1回マッチする
  +直前の項目が1回以上マッチする。
  {n}: 直前の項目がn回マッチする
  etc...
  
{{パイプ}} |
  シェルコマンドを組みあわせるための機能
  ls -l example | grep -n "txt"
  dpkg -l | grep -n "python" | less のように二個組み合わせることもできる。
  
{{プロセスps}}
  実行中のプログラムをpsで表示できる
  ps: 自分のみ
  ps aux: 自分以外も含む
  ps aux | grep "
  
  
  {{bash}}
  シェル: Unix互換OSのカーネルとユーザーとの仲立ち
  -プログラムの起動、切り替え、停止
  -ファイル操作
  -コマンドの入力履歴や補完
  -シェルコマンドの一括実行
  
 alias: コマンドの別名を表示
 コマンドの別名を登録する方法
  alias hello='echo="hello world"' (登録)
  alias (確認コマンド)
  
  別名を解除するには、unalias hello などunaliasコマンドを活用する。
  
  PS
    echo $PS1 : プロンプトの設定を確認する。$が必要。
    プロンプトの設定を変更する
    Linuxの標準シェルであるbashでは、PS1という環境変数によってプロンプトを定義している。従って、exportコマンドでPS1を変更すればいい。
    よって
     export PS1="[\u@\h \w]\$"
     
  
  
  







  
